<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UCSimpleSocket</name>
    </assembly>
    <members>
        <member name="T:UCSimpleSocket.Connection">
            <summary>
            A class representing a TCP connection between a local IP endpoint and a remote IP endpoint.
            </summary>
        </member>
        <member name="E:UCSimpleSocket.Connection.ConnectionFaulted">
            <summary>
            An event that is raised when the underlying connection goes into a faulted state.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Connection.#ctor(System.Action{UCSimpleSocket.Connection,UCSimpleSocket.Datagram,System.DateTime},System.Net.Sockets.TcpClient,System.Boolean,Microsoft.Extensions.Logging.ILogger{UCSimpleSocket.Connection})">
            <summary>
            Initialized a new instance of the <see cref="T:UCSimpleSocket.Connection"/> class.
            </summary>
            <param name="emitAction">An <see cref="T:System.Action`3"/> to invoke when a <see cref="T:UCSimpleSocket.Datagram"/> is received.</param>
            <param name="clientSocket">The <see cref="T:System.Net.Sockets.TcpClient"/> to use as the underlying connection.</param>
            <param name="ownsTcpClient">A <see cref="T:System.Boolean"/> indicating whether the <paramref name="clientSocket"/> can be disposed when this instance is disposed or not.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> to use for logging information.</param>
        </member>
        <member name="M:UCSimpleSocket.Connection.#ctor(System.Net.Sockets.TcpClient,System.Boolean,UCSimpleSocket.IDatagramEmitter,Microsoft.Extensions.Logging.ILogger{UCSimpleSocket.Connection})">
            <summary>
            Initialized a new instance of the <see cref="T:UCSimpleSocket.Connection"/> class.
            </summary>
            <param name="clientSocket">The <see cref="T:System.Net.Sockets.TcpClient"/> to use as the underlying connection.</param>
            <param name="ownsTcpClient">A <see cref="T:System.Boolean"/> indicating whether the <paramref name="clientSocket"/> can be disposed when this instance is disposed or not.</param>
            <param name="datagramEmitter">A <see cref="T:UCSimpleSocket.IDatagramEmitter"/> that is used to emit received datagrams.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> to use for logging information.</param>
        </member>
        <member name="P:UCSimpleSocket.Connection.IsFaulted">
            <summary>
            Gets a <see cref="T:System.Boolean"/> indicating whether the underlyiong socket is in a faulted state or not.
            </summary>
        </member>
        <member name="P:UCSimpleSocket.Connection.Name">
            <summary>
            Gets a <see cref="T:System.String"/> representing the name of this <see cref="T:UCSimpleSocket.Connection"/>. The name consists of the local and remote <see cref="T:System.Net.IPEndPoint"/>.
            </summary>
        </member>
        <member name="P:UCSimpleSocket.Connection.LocalEndPoint">
            <summary>
            The local <see cref="T:System.Net.IPEndPoint"/> that this connection is using.
            </summary>
        </member>
        <member name="P:UCSimpleSocket.Connection.RemoteEndPoint">
            <summary>
            The remote <see cref="T:System.Net.IPEndPoint"/> that this connection is connected to.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Connection.SendDatagramAsync(UCSimpleSocket.Datagram)">
            <summary>
            Sends a datagram to the remote host.
            </summary>
            <param name="datagram">The <see cref="T:UCSimpleSocket.Datagram"/> to send.</param>
        </member>
        <member name="M:UCSimpleSocket.Connection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Connection.Finalize">
            <summary>
            Default destructor.
            </summary>
        </member>
        <member name="T:UCSimpleSocket.Datagram">
            <summary>
            A class representing a datagram that was received by a <see cref="T:UCSimpleSocket.Connection"/>.
            </summary>
        </member>
        <member name="P:UCSimpleSocket.Datagram.CommandType">
            <summary>
            The command type of the datagram. The specific value of <see cref="P:UCSimpleSocket.Datagram.CommandType"/> is application specific and should be consistent between applications communicating with eachother.
            </summary>
        </member>
        <member name="P:UCSimpleSocket.Datagram.Data">
            <summary>
            The user defined data that was sent or received.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Datagram.ToString">
            <summary>
            A string that represents the current object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object.</returns>
        </member>
        <member name="M:UCSimpleSocket.Datagram.ToString(System.Byte)">
            <summary>
            A string that represents the current object with the properties indented by <paramref name="numTabs"/> number of tabs."/>
            </summary>
            <param name="numTabs">The number of tab characters that each property line should be indented with.</param>
            <returns>A <see cref="T:System.String"/> that represents the current object with the properties indented by <paramref name="numTabs"/> number of tabs."/></returns>
        </member>
        <member name="T:UCSimpleSocket.Emitters.ActionEmitter">
            <summary>
            A class representing a datagram emitter that queues the emitted datagrams and can be peeked and dequeued.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Emitters.ActionEmitter.#ctor(System.Action{UCSimpleSocket.Connection,UCSimpleSocket.Datagram,System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:UCSimpleSocket.Emitters.ActionEmitter"/> class.
            </summary>
            <param name="action">The action to invoke when a <see cref="T:UCSimpleSocket.Datagram"/> is received.</param>
        </member>
        <member name="M:UCSimpleSocket.Emitters.ActionEmitter.DatagramReceived(UCSimpleSocket.Connection,UCSimpleSocket.Datagram,System.DateTime)">
            <summary>
            Called when a <see cref="T:UCSimpleSocket.Datagram"/> is received from the remote endpoint.
            </summary>
            <param name="source">The <see cref="T:UCSimpleSocket.Connection"/> which received the datagram.</param>
            <param name="datagram">The <see cref="T:UCSimpleSocket.Datagram"/> that was received.</param>
            <param name="receivedTime">The exact date and time the connection received the datagram.</param>
        </member>
        <member name="T:UCSimpleSocket.Emitters.QueueEmitter">
            <summary>
            A class representing a datagram emitter that queues the emitted datagrams and can be peeked and dequeued.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.Emitters.QueueEmitter.DatagramReceived(UCSimpleSocket.Connection,UCSimpleSocket.Datagram,System.DateTime)">
            <summary>
            Called when a <see cref="T:UCSimpleSocket.Datagram"/> is received from the remote endpoint. Enqueues the received <see cref="T:UCSimpleSocket.Datagram"/>.
            </summary>
            <param name="source">The <see cref="T:UCSimpleSocket.Connection"/> which received the datagram.</param>
            <param name="datagram">The <see cref="T:UCSimpleSocket.Datagram"/> that was received.</param>
            <param name="receivedTime">The exact date and time the connection received the datagram.</param>
        </member>
        <member name="M:UCSimpleSocket.Emitters.QueueEmitter.TryPeek(UCSimpleSocket.Connection@,UCSimpleSocket.Datagram@,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to return a <see cref="T:UCSimpleSocket.Datagram"/> from the beginning of the queue without removing it.
            </summary>
            <param name="source">When this method returns, <paramref name="source"/> contains the connection that received the <see cref="T:UCSimpleSocket.Datagram"/>, if a datagram exists.</param>
            <param name="datagram">When this method returns, <paramref name="datagram"/> contains the <see cref="T:UCSimpleSocket.Datagram"/>, if it exists.</param>
            <param name="receivedTime">When this method returns, <paramref name="receivedTime"/> contains the date and time that the <see cref="T:UCSimpleSocket.Datagram"/> was received, if a datagram exists.</param>
            <returns><code>true</code> if a <see cref="T:UCSimpleSocket.Datagram"/> was returned successfully; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:UCSimpleSocket.Emitters.QueueEmitter.TryDequeue(UCSimpleSocket.Connection@,UCSimpleSocket.Datagram@,System.Nullable{System.DateTime}@)">
            <summary>
            Tries to return and remove a <see cref="T:UCSimpleSocket.Datagram"/> from the beginning of the queue.
            </summary>
            <param name="source">When this method returns, <paramref name="source"/> contains the connection that received the <see cref="T:UCSimpleSocket.Datagram"/>, if a datagram exists.</param>
            <param name="datagram">When this method returns, <paramref name="datagram"/> contains the <see cref="T:UCSimpleSocket.Datagram"/>, if it exists.</param>
            <param name="receivedTime">When this method returns, <paramref name="receivedTime"/> contains the date and time that the <see cref="T:UCSimpleSocket.Datagram"/> was received, if a datagram exists.</param>
            <returns><code>true</code> if a <see cref="T:UCSimpleSocket.Datagram"/> was returned successfully; otherwise, <code>false</code>.</returns>
        </member>
        <member name="P:UCSimpleSocket.Emitters.QueueEmitter.Count">
            <summary>
            Gets the number of <see cref="T:UCSimpleSocket.Datagram"/> objects that are available in the queue.
            </summary>
        </member>
        <member name="T:UCSimpleSocket.IDatagramEmitter">
            <summary>
            An interface that rerpesents a datagram emitter to use for received datagrams.
            </summary>
        </member>
        <member name="M:UCSimpleSocket.IDatagramEmitter.DatagramReceived(UCSimpleSocket.Connection,UCSimpleSocket.Datagram,System.DateTime)">
            <summary>
            Called when a <see cref="T:UCSimpleSocket.Datagram"/> is received from the remote endpoint.
            </summary>
            <param name="source">The <see cref="T:UCSimpleSocket.Connection"/> which received the datagram.</param>
            <param name="datagram">The <see cref="T:UCSimpleSocket.Datagram"/> that was received.</param>
            <param name="receivedTime">The exact date and time the connection received the datagram.</param>
        </member>
    </members>
</doc>
